#!/bin/ksh

USAGE="usage: pkg [-h] [add|info|rm] [package]"
VERSION="1.0"
LOCALBASE="/usr/local"

# This is essentially the usage() function common in BSD.
errorexit() {
	echo $USAGE
	exit 1
}

# Install a package. Accepts a local or ftp/http path to a package name.
# Do not add the .tgz at the end! ftp is the name of the fetching program.
# You might want to replace that with curl or wget on your machine.
# XXX: You could also add ftps and https support if using curl or wget.
addpackage() {
	# Fetch.
	# Check if we are fetching locally or from the Internet.
	# ftp and http only (add ftps and https if using curl or wget)
	case "$1" in
		ftp://*|http://*)
			FETCHED=1
			cd ${LOCALBASE}/pkg
			ftp "$1".tgz
			;;
		*)
			FETCHED=0
			;;
	esac

	# Install.
	# Remember to remove the tarball if downloaded
	# from the Internet. We keep the tarball if
	# installing from a local file.
	echo -n "Installing ${1}... "
	if [ $FETCHED -eq 1 ] ; then
		tar xzf "${1##*/}".tgz -C /
		rm -f ${LOCALBASE}/pkg/"${1##*/}".tgz
	else
		tar xzf "$1".tgz -C /
	fi
	echo "done!"

	return 0
}

# Output a list of all installed packages with a description of each.
infopackage() {
	# XXX: This could be better, but works.
	cd ${LOCALBASE}/pkg/plists
	if [ "$1" ] ; then
		head -3 "*** pkg info ***" "$1" | more
	else
		head -3 * | more
	fi
	return 0
}

# Remove an installed package.
# Takes the literal package name without the .tgz ending.
# Ask for confirmation (XXX: implement an -f flag to force remove)
rmpackage() {
	echo "Are you sure? [y/N]"
	read ANSWER
	case "$ANSWER" in
		y|yes|Y|Yes|YES)
			echo -n "Deleting ${1}... "
			tail -n +5 ${LOCALBASE}/pkg/plists/"${1##*/}" |
				while read x; do rm -f ${LOCALBASE}/"$x"; done
			rm -f ${LOCALBASE}/pkg/plists/"${1##*/}"
			echo "done!"
			;;
		*)
			exit 1
			;;
	esac
	return 0
}

# We begin execution here.
# Check to see if -h flag given (print info and quit, ignore all
# further arguments). Then make sure we have the right number of
# arguments.
#
# add and rm need root and a second argument. info takes one or
# two arguments and does not need root.
if [ "$1" = "-h" ] ; then
	echo $USAGE
	echo -n "pkg "
	echo $VERSION
	echo "Copyright (c) 2015 Brian Callahan <bcallah@devio.us>"
	echo "MIT License"
	exit 1
fi

if [ $# -eq 0 ] ; then
	errorexit
elif [ $# -gt 2 ] ; then
	errorexit
fi

if [ "$1" = "add" ] ; then
	if [ $(id -u) -ne 0 ] ; then
		echo "pkg: must be run as root"
		errorexit
	fi
	if [ "$2" ] ; then
		addpackage "$2"
	else
		errorexit
	fi
elif [ "$1" = "info" ] ; then
	if [ "$2" ] ; then
		infopackage "$2"
	else
		infopackage
	fi
elif [ "$1" = "rm" ] ; then
	if [ $(id -u) -ne 0 ] ; then
		echo "pkg: must be run as root"
		errorexit
	fi
	if [ "$2" ] ; then
		rmpackage "$2"
	else
		errorexit
	fi
else
	errorexit
fi

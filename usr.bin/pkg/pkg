#!/bin/ksh

USAGE="usage: pkg [-h] [add|info|rm] [package]"
VERSION="1.4"
LOCALBASE="/usr/local"

# This is essentially the usage() function common in BSD.
errorexit() {
	echo $USAGE
	exit 1
}

# Install a package. Accepts a local or ftp/http path to a package name.
# Do not add the .tgz at the end! ftp is the name of the fetching program.
# You might want to replace that with curl or wget on your machine.
addpackage() {
	# Install.
	echo -n "Installing ${1##*/}"
	echo -n "... "
	tar xzf "$1".tgz -C / 2>/dev/null
	if [ $? -ne 0 ] ; then
		if [ ! "$PKG_PATH" ] ; then
			PKG_PATH=http://devio.us/~bcallah/pub/LiteBSD/packages/
		fi
		ftp -V -o - "${PKG_PATH}${1##*/}".tgz 2>/dev/null | tar xzf - -C / 2>/dev/null
		if [ $? -ne 0 ] ; then
			echo -n "Error: Could not find "
			echo -n "${1##*/} "
			echo "package"
		else
			echo "done!"
		fi
	else
		echo "done!"
	fi

	# XXX: Did the package leave a message? Print it then.
	cat "${LOCALBASE}/pkg/message/${1##*/}" 2>/dev/null

	return 0
}

# Output a list of all installed packages with a description of each.
infopackage() {
	if [ ! "$PAGER" ] ; then
		PAGER=more
	fi
	# XXX: This could be better, but works.
	cd ${LOCALBASE}/pkg/plists
	if [ "$1" ] ; then
		head -3 "*** pkg info ***" "$1" 2>/dev/null | $PAGER
	else
		head -3 * 2>/dev/null | $PAGER
	fi
	return 0
}

# Remove an installed package.
# Takes the literal package name without the .tgz ending.
# Ask for confirmation (XXX: implement an -f flag to force remove)
rmpackage() {
	echo -n "Are you sure? [y/N] "
	read ANSWER
	case "$ANSWER" in
		y|yes|Y|Yes|YES)
			echo -n "Deleting ${1}... "
			tail -n +5 ${LOCALBASE}/pkg/plists/"${1##*/}" |
				while read x; do rm -f ${LOCALBASE}/"$x"; done
			rm -f ${LOCALBASE}/pkg/plists/"${1##*/}"
			echo "done!"
			;;
		*)
			exit 1
			;;
	esac
	return 0
}

# We begin execution here.
# Check to see if -h flag given (print info and quit, ignore all
# further arguments). Then make sure we have the right number of
# arguments.
#
# add and rm need root and a second argument. info takes one or
# two arguments and does not need root.
if [ "$1" = "-h" ] ; then
	echo $USAGE
	echo -n "pkg "
	echo $VERSION
	echo "Copyright (c) 2015-2016 Brian Callahan <bcallah@devio.us>"
	echo "MIT License"
	exit 1
fi

if [ $# -eq 0 ] ; then
	errorexit
elif [ $# -gt 2 ] ; then
	errorexit
fi

if [ "$1" = "add" ] ; then
	if [ $(id -u) -ne 0 ] ; then
		echo "pkg: add requires root"
		errorexit
	fi
	if [ "$2" ] ; then
		addpackage "$2"
	else
		errorexit
	fi
elif [ "$1" = "info" ] ; then
	if [ "$2" ] ; then
		infopackage "$2"
	else
		infopackage
	fi
elif [ "$1" = "rm" ] ; then
	if [ $(id -u) -ne 0 ] ; then
		echo "pkg: rm requires root"
		errorexit
	fi
	if [ "$2" ] ; then
		rmpackage "$2"
	else
		errorexit
	fi
else
	errorexit
fi
